#!/usr/bin/env racket
#lang reader (submod "support/lang/script.rkt" reader)

(require gregor
         gregor/period
         racket/format
         racket/list
         racket/match
         racket/port
         "support/resource.rkt")

(define current-timestamp-mode (make-parameter 'absolute))
(define current-timestamp-precision (make-parameter 'seconds))
(define current-timestamp-output-buffer-limit (make-parameter +inf.0))

(define (~r/2 v) (~r v #:min-width 2 #:pad-string "0"))
(define (~r/3 v) (~r v #:min-width 3 #:pad-string "0"))

(define (timestamp start-time
                   #:current-time [current-time (now)]
                   #:mode [mode (current-timestamp-mode)]
                   #:precision [precision (current-timestamp-precision)])
  (define (absolute-timestamp)
    (~t current-time
        (match precision
          ['seconds      "HH:mm:ss"]
          ['milliseconds "HH:mm:ss.SSS"])))

  (define (relative-timestamp)
    (define current-period (time-period-between start-time current-time))
    (~a "+" (~r/2 (period-ref current-period 'hours))
        ":" (~r/2 (period-ref current-period 'minutes))
        ":" (~r/2 (period-ref current-period 'seconds))
        (match precision
          ['seconds      ""]
          ['milliseconds (~a "." (~r/3 (period-ref current-period 'milliseconds)))])))

  (define timestamp-str
    (match mode
      ['absolute (absolute-timestamp)]
      ['relative (relative-timestamp)]
      ['both (~a (absolute-timestamp) " " (relative-timestamp))]))

  (~a "[" timestamp-str "]"))

(define (timestamp-lines #:mode [mode (current-timestamp-mode)]
                         #:precision [precision (current-timestamp-precision)]
                         #:input [in (current-input-port)]
                         #:output [orig-out (current-output-port)]
                         #:output-buffer-limit [output-buffer-limit (current-timestamp-output-buffer-limit)])
  (define (go out)
    (define start-time (now))
    (define (current-timestamp)
      (timestamp start-time #:mode mode #:precision precision))
    (define (write-timestamp [str (current-timestamp)])
      (write-string str out)
      (write-string " " out))

    (define buffer (make-bytes 4096))

    (for/fold ([at-start-of-line? #t]
               #:result (void))
              ([num-bytes (in-producer (λ () (read-bytes-avail! buffer in)) eof-object?)])
      (match-define (cons first-line other-lines) (regexp-split #rx#"\n" buffer 0 num-bytes))
      (when at-start-of-line?
        (write-timestamp))
      (write-bytes first-line out)
      (cond
        [(empty? other-lines)
         #f]
        [else
         (newline out)
         (define last-line
           (match other-lines
             [(list only-line)
              only-line]
             [(list middle-lines ... last-line)
              (define timestamp-str (current-timestamp))
              (for ([line (in-list middle-lines)])
                (write-timestamp timestamp-str)
                (write-bytes line out)
                (newline out))
              last-line]))
         (cond
           [(zero? (bytes-length last-line))
            #t]
           [else
            (write-timestamp)
            (write-bytes last-line out)
            #f])])))

  (cond
    [(zero? output-buffer-limit)
     (go orig-out)]
    [else
     (with-resources ([(buffered-out-in buffered-out-out)
                       (make-pipe-resource #:limit (if (eqv? output-buffer-limit +inf.0)
                                                       #f
                                                       output-buffer-limit))])
       (define worker (thread (λ () (copy-port buffered-out-in orig-out))))
       (go buffered-out-out)
       (close-output-port buffered-out-out)
       (thread-wait worker))]))

(module+ main
  (require racket/cmdline)

  (command-line
   #:usage-help
   "Prints each line of stdin to stdout, prefixed with a timestamp."
   #:once-any
   ["--absolute"
    "Print absolute timestamps using the system clock. (default)"
    (current-timestamp-mode 'absolute)]
   ["--relative"
    "Print timestamps relative to process startup."
    (current-timestamp-mode 'relative)]
   ["--both"
    "Print both absolute and relative timestamps."
    (current-timestamp-mode 'both)]
   #:once-each
   ["--millis"
    "Print timestamps with millisecond precision."
    (current-timestamp-precision 'milliseconds)]
   #:once-any
   ["--unlimited-output-buffer"
    "Buffer an arbitrary amount of output. (default)"
    (current-timestamp-output-buffer-limit +inf.0)]
   ["--limit-output-buffer"
    num-bytes
    ("Limit the output buffer to <num-bytes> bytes. A limit of 0"
     "disables additional output buffering beyond any buffering"
     "inherent in the output port."
     ""
     "Using a limited output buffer is usually a bad idea: if the"
     "buffer fills up, further input will not be read until the"
     "output is consumed, so future timestamps will not be accurate."
     "However, disabling output buffering is necessary if the input"
     "is demand-driven.")
    (unless (regexp-match? #px"^[0-9]+$" num-bytes)
      (raise-user-error 'limit-output-buffer "argument must be a non-negative integer"))
    (current-timestamp-output-buffer-limit (string->number num-bytes))])

  (timestamp-lines))

(module+ test
  (require (for-syntax racket/base)
           racket/stxparam
           rackunit
           syntax/parse/define)

  (define (read-all-bytes-avail in
                                [initial-buffer-size 256]
                                #:on-eof [on-eof values])
    (let loop ([buffer (make-bytes initial-buffer-size)]
               [buffer-position 0]
               [buffer-size initial-buffer-size])
      (define num-bytes (read-bytes-avail!* buffer in buffer-position))
      (cond
        [(or (eof-object? num-bytes) (zero? num-bytes))
         (define result (bytes->immutable-bytes (subbytes buffer 0 buffer-position)))
         (if (eof-object? num-bytes) (on-eof result) result)]
        [else
         (define new-pos (+ buffer-position num-bytes))
         (cond
           [(= new-pos buffer-size)
            (define new-buffer-size (* 2 buffer-size))
            (define new-buffer (make-bytes new-buffer-size))
            (bytes-copy! new-buffer 0 buffer)
            (loop new-buffer buffer-position new-buffer-size)]
           [else
            (loop buffer buffer-position buffer-size)])])))

  (define clock-resource
    (make-resource
     #:name 'clock
     #:wrapper (λ (proc)
                 (define clock (datetime 0 1 1 12 10 30))
                 (define (advance-clock! period)
                   (set! clock (+period clock period)))
                 (parameterize ([current-timezone "Etc/UTC"]
                                [current-clock (λ () (->posix clock))])
                   (proc advance-clock!)))))

  (define (call-with-clock proc)
    (define clock (datetime 0 1 1 12 10 30))
    (define (advance-clock! period)
      (set! clock (+period clock period)))
    (parameterize ([current-timezone "Etc/UTC"]
                   [current-clock (λ () (->posix clock))])
      (proc advance-clock!)))

  (define-syntax (test-case-keyword stx)
    (raise-syntax-error #f "cannot be used outside of test case" stx))
  (define-rename-transformer-parameter advance-clock! (make-rename-transformer #'test-case-keyword))
  (define-rename-transformer-parameter write+read! (make-rename-transformer #'test-case-keyword))

  (define (make-timestamp-lines-resource #:mode [mode (current-timestamp-mode)]
                                         #:precision [precision (current-timestamp-precision)])
    (make-resource
     #:name 'timestamp-lines
     #:wrapper
     (λ (proc)
       (with-resources ([() (make-custodian-resource)]
                        [(stdin-in stdin-out) (make-pipe-resource #:name 'stdin)]
                        [(stdout-in stdout-out) (make-pipe-resource #:name 'stdout)])
         (define (write+read!-proc in-bytes expected-response-length)
           (write-bytes in-bytes stdin-out)
           (sync (read-bytes-evt expected-response-length stdout-in)
                 (wrap-evt (alarm-evt (+ (current-inexact-milliseconds) 100))
                           (λ (evt)
                             (define avail
                               (read-all-bytes-avail stdout-in
                                                     #:on-eof (λ (avail) `#s(eof ,avail))))
                             (if (bytes? avail)
                                 `#s(timeout ,avail)
                                 avail)))))
         (with-resources ([advance-clock!-proc clock-resource])
           (thread (λ ()
                     (timestamp-lines #:mode mode #:precision precision
                                      #:input stdin-in #:output stdout-out)
                     (close-output-port stdout-out)))
           (proc advance-clock!-proc write+read!-proc)
           (close-output-port stdin-out)
           (port->bytes stdout-in))))))

  (define-syntax-parser timestamp-lines-test-case
    [(_ {~alt {~once {~seq #:mode mode:expr}}
              {~optional {~seq #:precision precision:expr}}}
        ...
        body ...+)
     #`(test-begin
        (define leftovers
          (with-resources ([(advance-clock!-proc write+read!-proc)
                            (make-timestamp-lines-resource #:mode mode
                                                           {~? {~@ #:precision precision}})])
            (syntax-parameterize
                ([advance-clock! (make-rename-transformer #'advance-clock!-proc)]
                 [write+read! (make-rename-transformer #'write+read!-proc)])
              body ...)))
        #,(syntax/loc this-syntax
            (check-equal? leftovers #"" "Data left at end of port")))])

  (define-syntax-parser check-write+read!
    [(_ in-bytes:expr expected-response-expr:expr)
     #`(let ([expected-response expected-response-expr])
         #,(syntax/loc this-syntax
             (check-equal? (write+read! in-bytes (bytes-length expected-response))
                           expected-response)))])

  (timestamp-lines-test-case
   #:mode 'absolute
   (check-write+read! #"hello" #"[12:10:30] hello"))
  (timestamp-lines-test-case
   #:mode 'relative
   (check-write+read! #"hello" #"[+00:00:00] hello"))
  (timestamp-lines-test-case
   #:mode 'both
   (check-write+read! #"hello" #"[12:10:30 +00:00:00] hello"))

  (timestamp-lines-test-case
   #:mode 'relative
   (check-write+read! #"hello\n" #"[+00:00:00] hello\n"))
  (timestamp-lines-test-case
   #:mode 'relative
   (check-write+read! #"hello\ngoodbye" #"[+00:00:00] hello\n[+00:00:00] goodbye"))
  (timestamp-lines-test-case
   #:mode 'relative
   (check-write+read! #"hello\ngoodbye\n" #"[+00:00:00] hello\n[+00:00:00] goodbye\n"))

  (timestamp-lines-test-case
   #:mode 'relative
   (check-write+read! #"\n\n\n" #"[+00:00:00] \n[+00:00:00] \n[+00:00:00] \n"))

  (timestamp-lines-test-case
   #:mode 'relative
   (check-write+read! #"hello " #"[+00:00:00] hello ")
   (check-write+read! #"world" #"world")
   (check-write+read! #"!\n" #"!\n")
   (check-write+read! #"hello" #"[+00:00:00] hello")
   (check-write+read! #"goodbye\ncruel world\n" #"goodbye\n[+00:00:00] cruel world\n"))

  (timestamp-lines-test-case
   #:mode 'relative
   (define long-message (make-bytes 300 65))
   (check-write+read! (bytes-append long-message #"\n" long-message)
                      (bytes-append #"[+00:00:00] " long-message #"\n"
                                    #"[+00:00:00] " long-message)))

  (timestamp-lines-test-case
   #:mode 'both
   (check-write+read! #"hello\n" #"[12:10:30 +00:00:00] hello\n")
   (advance-clock! (period (hours 1) (minutes 2) (seconds 3)))
   (check-write+read! #"goodbye\n" #"[13:12:33 +01:02:03] goodbye\n")))
