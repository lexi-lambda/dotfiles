#!/usr/bin/env racket
#lang reader (submod "support/lang/script/exec.rkt" reader)

(require racket/cmdline
         racket/function
         racket/list
         racket/match
         racket/port
         racket/set
         racket/system)

(define git-executable (find-executable-path "git"))
(define git-available? (and git-executable #t))

(define ring-bell? #f)
(define ignore-dotfiles? #t)
(define ignore-vcs? git-available?)
(define paths '())

(define-values [command args]
  (command-line
   #:multi
   [("--path" "-p") path "file or directory to watch (can be specified multiple times)"
                    (set! paths (cons path paths))]
   #:once-each
   [("--bell") "print the bell character each time the command completes"
               (set! ring-bell? #t)]
   #:once-any
   [("--ignore-dotfiles") "do not include dotfiles (and files inside them) in the watch (default)"
                          (set! ignore-dotfiles? #t)]
   [("--no-ignore-dotfiles") "include dotfiles (and files inside them) in the watch"
                             (set! ignore-dotfiles? #f)]
   #:once-any
   [("--ignore-vcs") "do not include files ignored by git in the watch (default if ‘git’ is in PATH)"
                     (set! ignore-vcs? #t)]
   [("--no-ignore-vcs") "include files ignored by git in the watch"
                        (set! ignore-vcs? #f)]
   #:args (command . arg)
   (values command arg)))

(when (empty? paths)
  (panic! "No paths to watch; specify a path using -p or --path."))
(when (and ignore-vcs? (not git-available?))
  (panic! "--ignore-vcs was specified, but could not find ‘git’ executable in PATH."))

(define (dotfile? path)
  (match-let-values ([(_ name _) (split-path path)])
    (and (path-string? name)
         (regexp-match? #px"^\\." name))))

(define gitignored?
  (if ignore-vcs?
      (match-let ([response-regexp (byte-pregexp #"^([^\0]*)\0([^\0]*)\0([^\0]*)\0([^\0]*)\0")]
                  [(list stdout stdin _ _ _)
                   (process*/ports #f #f (current-error-port)
                                   git-executable "check-ignore" "--stdin" "-zvn")]
                  [lock (make-semaphore 1)])
        (λ (path)
          (call-with-semaphore
           lock
           (thunk (fprintf stdin "~a\0" (path->string path))
                  (flush-output stdin)
                  (match (regexp-match response-regexp stdout)
                    [(list _ #"" #"" #"" _) #f]
                    [(list _ _   _   _   _) #t])))))
      (λ (path) (error 'gitignored? "internal error"))))

(define (ignored? path)
  (or (and ignore-dotfiles? (dotfile? path))
      (and ignore-vcs? (gitignored? path))))

(define (find-paths-to-watch path)
  (cons path
        (if (directory-exists? path)
            (for/list ([path* (in-directory path (negate ignored?))]
                       #:unless (ignored? path*))
              path*)
            '())))

(define (paths-to-watch)
  (remove-duplicates (append-map find-paths-to-watch paths)))

(define (paths-change-evt paths)
  (apply choice-evt (filter-map (λ (path) (with-handlers ([exn:fail:filesystem? (const #f)])
                                            (filesystem-change-evt path)))
                                paths)))

(define (paths-timestamps paths)
  (for/hash ([path (in-list paths)])
    (values path (if (directory-exists? path) 'directory
                     (file-or-directory-modify-seconds path)))))

(define (paths-changed stamps-a stamps-b)
  (let ([changed-paths (set-symmetric-difference (hash-keys stamps-a) (hash-keys stamps-b))]
        [unchanged-paths (set-intersect (hash-keys stamps-a) (hash-keys stamps-b))])
    (append changed-paths
            (filter-not (λ (path) (equal? (hash-ref stamps-a path)
                                          (hash-ref stamps-b path)))
                        unchanged-paths))))

(let ([starting-paths (paths-to-watch)])
  (let loop ([watched-paths starting-paths]
             [watched-paths-stamps (paths-timestamps starting-paths)])
    (define-values [new-paths new-paths-stamps]
      (let continue ([display-message? #t]
                     [watched-paths watched-paths]
                     [watched-paths-stamps watched-paths-stamps])
        (let* ([cust (make-custodian)]
               [rebuild-evt
                (parameterize ([current-custodian cust])
                  (choice-evt (handle-evt (paths-change-evt watched-paths) (const 'file-changed))
                              (handle-evt (read-line-evt (current-input-port))
                                          (λ (line) (if (eof-object? line) (exit) 'enter)))))])
          (when display-message?
            (displayln "Watching for changes; press Enter to force a rebuild." (current-error-port)))
          (let ([rebuild-request (sync rebuild-evt)])
            (custodian-shutdown-all cust)
            (let* ([new-paths (paths-to-watch)]
                   [new-paths-stamps (paths-timestamps new-paths)]
                   [changed-paths (paths-changed watched-paths-stamps new-paths-stamps)])
              (if (and (eq? 'file-changed rebuild-request)
                       (empty? changed-paths))
                  ; If none of the paths we care about actually changed, don’t rebuild, just start
                  ; watching again.
                  (continue #f new-paths new-paths-stamps)
                  (values new-paths new-paths-stamps)))))))
    (apply system* (find-executable-path command) args)
    (when ring-bell? (display #\u7))
    (newline)
    (loop new-paths new-paths-stamps)))
